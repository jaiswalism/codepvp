[
  {
    "title": "Target Sum Pair",
    "difficulty": "Easy",
    "tags": [
      "Arrays",
      "Hash Table"
    ],
    "statement": "Given an array of unique integers `nums` and a target integer `target`, find two distinct integers in the array that sum up to the target. Return the indices of these two numbers. You can assume that exactly one solution exists.",
    "inputFormat": "- The first line contains the target integer.\r\n- The second line contains a space-separated list of integers representing the array `nums`.",
    "outputFormat": "- A single line with two space-separated integers representing the 0-based indices of the two numbers, sorted in ascending order.",
    "constraints": "- 2 <= nums.length <= 10^4\r\n- -10^9 <= nums[i] <= 10^9\r\n- -10^9 <= target <= 10^9",
    "samples": [
      {
        "input": "9\r\n2 7 11 15",
        "output": "0 1"
      },
      {
        "input": "6\r\n3 2 4",
        "output": "1 2"
      }
    ],
    "hiddenTestCases": [
      {
        "input": "8\r\n1 2 3 4 5",
        "output": "2 4"
      },
      {
        "input": "-1\r\n-5 -2 1 4 6",
        "output": "0 3"
      },
      {
        "input": "100\r\n50 50",
        "output": "Error: This case is invalid by \"unique integers\" constraint. Let's provide a valid one."
      },
      {
        "input": "100\r\n10 20 30 40 50 60 70 80 90",
        "output": "0 8"
      },
      {
        "input": "0\r\n-10 10 20 30",
        "output": "0 1"
      }
    ]
  },
  {
    "title": "Balanced Brackets",
    "difficulty": "Easy",
    "tags": [
      "Strings",
      "Stack"
    ],
    "statement": "Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if:\r\n1. Open brackets must be closed by the same type of brackets.\r\n2. Open brackets must be closed in the correct order.\r\n3. Every close bracket has a corresponding open bracket of the same type.",
    "inputFormat": "- A single line containing the string `s`.",
    "outputFormat": "- Print \"true\" if the string is valid, otherwise print \"false\".",
    "constraints": "- 1 <= s.length <= 10^4",
    "samples": [
      {
        "input": "()[]{}",
        "output": "true"
      },
      {
        "input": "(]",
        "output": "false"
      }
    ],
    "hiddenTestCases": [
      {
        "input": "([)]",
        "output": "false"
      },
      {
        "input": "{[]}",
        "output": "true"
      },
      {
        "input": "((()))",
        "output": "true"
      },
      {
        "input": "{",
        "output": "false"
      },
      {
        "input": "\"\"",
        "output": "true"
      }
    ]
  },
  {
    "title": "Maximum Single-Sale Profit",
    "difficulty": "Easy",
    "tags": [
      "Arrays",
      "Greedy"
    ],
    "statement": "You are given an array `prices` where `prices[i]` is the price of a given stock on the `i-th` day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.",
    "inputFormat": "- A single line containing space-separated integers for the `prices` array.",
    "outputFormat": "- A single integer representing the maximum profit.",
    "constraints": "- 1 <= prices.length <= 10^5\r\n- 0 <= prices[i] <= 10^4",
    "samples": [
      {
        "input": "7 1 5 3 6 4",
        "output": "5"
      },
      {
        "input": "7 6 4 3 1",
        "output": "0"
      }
    ],
    "hiddenTestCases": [
      {
        "input": "1 2 3 4 5",
        "output": "4"
      },
      {
        "input": "5",
        "output": "0"
      },
      {
        "input": "2 4 1",
        "output": "2"
      },
      {
        "input": "3 3 5 0 0 3 1 4",
        "output": "4"
      }
    ]
  },
  {
    "title": "Contains Duplicate Value",
    "difficulty": "Easy",
    "tags": [
      "Arrays",
      "Hash Table"
    ],
    "statement": "Given an integer array `nums`, return \"true\" if any value appears at least twice in the array, and \"false\" if every element is distinct.",
    "inputFormat": "- A single line containing space-separated integers for the `nums` array.",
    "outputFormat": "- \"true\" or \"false\".",
    "constraints": "- 1 <= nums.length <= 10^5\r\n- -10^9 <= nums[i] <= 10^9",
    "samples": [
      {
        "input": "1 2 3 1",
        "output": "true"
      },
      {
        "input": "1 2 3 4",
        "output": "false"
      }
    ],
    "hiddenTestCases": [
      {
        "input": "1 1 1 3 3 4 3 2 4 2",
        "output": "true"
      },
      {
        "input": "0",
        "output": "false"
      },
      {
        "input": "-1 -2 -3 0 1 2 3 -1",
        "output": "true"
      },
      {
        "input": "1000000000 1 2 3 4 5 1000000000",
        "output": "true"
      }
    ]
  },
  {
    "title": "Reverse a String",
    "difficulty": "Easy",
    "tags": [
      "Strings",
      "Two Pointers"
    ],
    "statement": "Write a function that reverses a string. The input string is given as a single line.",
    "inputFormat": "- A single line containing the string `s`.",
    "outputFormat": "- The reversed string.",
    "constraints": "- 1 <= s.length <= 10^5",
    "samples": [
      {
        "input": "hello",
        "output": "olleh"
      },
      {
        "input": "world",
        "output": "dlrow"
      }
    ],
    "hiddenTestCases": [
      {
        "input": "a",
        "output": "a"
      },
      {
        "input": "ab",
        "output": "ba"
      },
      {
        "input": "racecar",
        "output": "racecar"
      },
      {
        "input": "12345",
        "output": "54321"
      }
    ]
  },
  {
    "title": "Palindrome Check",
    "difficulty": "Easy",
    "tags": [
      "Strings",
      "Two Pointers"
    ],
    "statement": "Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases. An empty string is a valid palindrome.",
    "inputFormat": "- A single line containing the string `s`.",
    "outputFormat": "- \"true\" if it's a palindrome, otherwise \"false\".",
    "constraints": "- 0 <= s.length <= 2 * 10^5",
    "samples": [
      {
        "input": "A man, a plan, a canal: Panama",
        "output": "true"
      },
      {
        "input": "race a car",
        "output": "false"
      }
    ],
    "hiddenTestCases": [
      {
        "input": "\"\"",
        "output": "true"
      },
      {
        "input": "0P",
        "output": "false"
      },
      {
        "input": "Was it a car or a cat I saw?",
        "output": "true"
      },
      {
        "input": ".,",
        "output": "true"
      }
    ]
  },
  {
    "title": "Maximum Subarray Sum",
    "difficulty": "Easy",
    "tags": [
      "Arrays",
      "Dynamic Programming"
    ],
    "statement": "Given an integer array `nums`, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.",
    "inputFormat": "- A single line of space-separated integers `nums`.",
    "outputFormat": "- An integer representing the largest sum.",
    "constraints": "- 1 <= nums.length <= 10^5\r\n- -10^4 <= nums[i] <= 10^4",
    "samples": [
      {
        "input": "-2 1 -3 4 -1 2 1 -5 4",
        "output": "6"
      },
      {
        "input": "5 4 -1 7 8",
        "output": "23"
      }
    ],
    "hiddenTestCases": [
      {
        "input": "1",
        "output": "1"
      },
      {
        "input": "-1",
        "output": "-1"
      },
      {
        "input": "-2 -1",
        "output": "-1"
      },
      {
        "input": "1 2 3 4 5",
        "output": "15"
      }
    ]
  },
  {
    "title": "Move Zeroes",
    "difficulty": "Easy",
    "tags": [
      "Arrays",
      "Two Pointers"
    ],
    "statement": "Given an integer array `nums`, move all 0's to the end of it while maintaining the relative order of the non-zero elements. This must be done in-place.",
    "inputFormat": "- A single line of space-separated integers `nums`.",
    "outputFormat": "- The modified array with space-separated integers.",
    "constraints": "- 1 <= nums.length <= 10^4\r\n- -2^31 <= nums[i] <= 2^31 - 1",
    "samples": [
      {
        "input": "0 1 0 3 12",
        "output": "1 3 12 0 0"
      },
      {
        "input": "0",
        "output": "0"
      }
    ],
    "hiddenTestCases": [
      {
        "input": "1 2 3 4",
        "output": "1 2 3 4"
      },
      {
        "input": "0 0 0 1",
        "output": "1 0 0 0"
      },
      {
        "input": "1 0 0 0",
        "output": "1 0 0 0"
      },
      {
        "input": "1 0 2 0 3 0 4",
        "output": "1 2 3 4 0 0 0"
      }
    ]
  },
  {
    "title": "Majority Element",
    "difficulty": "Easy",
    "tags": [
      "Arrays",
      "Hash Table",
      "Sorting"
    ],
    "statement": "Given an array `nums` of size `n`, return the majority element. The majority element is the element that appears more than `n / 2` times. You may assume that the majority element always exists in the array.",
    "inputFormat": "- A single line of space-separated integers `nums`.",
    "outputFormat": "- The majority element.",
    "constraints": "- 1 <= n <= 5 * 10^4\r\n- -10^9 <= nums[i] <= 10^9",
    "samples": [
      {
        "input": "3 2 3",
        "output": "3"
      },
      {
        "input": "2 2 1 1 1 2 2",
        "output": "2"
      }
    ],
    "hiddenTestCases": [
      {
        "input": "1",
        "output": "1"
      },
      {
        "input": "-1 -1 2",
        "output": "-1"
      },
      {
        "input": "6 5 5",
        "output": "5"
      },
      {
        "input": "3 3 4 2 4 4 2 4 4",
        "output": "4"
      }
    ]
  },
  {
    "title": "Fizz Buzz Classic",
    "difficulty": "Easy",
    "tags": [
      "Math",
      "Strings"
    ],
    "statement": "Given an integer `n`, return a list of strings where:\r\n- The `i`-th element is \"FizzBuzz\" if `i` is divisible by 3 and 5.\r\n- The `i`-th element is \"Fizz\" if `i` is divisible by 3.\r\n- The `i`-th element is \"Buzz\" if `i` is divisible by 5.\r\n- The `i`-th element is the number `i` (as a string) if none of the above conditions are true.\r\nThe list should be for numbers from 1 to `n`.",
    "inputFormat": "- A single integer `n`.",
    "outputFormat": "- A single line with the resulting list elements, space-separated.",
    "constraints": "- 1 <= n <= 10^4",
    "samples": [
      {
        "input": "3",
        "output": "1 2 Fizz"
      },
      {
        "input": "15",
        "output": "1 2 Fizz 4 Buzz Fizz 7 8 Fizz Buzz 11 Fizz 13 14 FizzBuzz"
      }
    ],
    "hiddenTestCases": [
      {
        "input": "1",
        "output": "1"
      },
      {
        "input": "5",
        "output": "1 2 Fizz 4 Buzz"
      },
      {
        "input": "6",
        "output": "1 2 Fizz 4 Buzz Fizz"
      },
      {
        "input": "30",
        "output": "1 2 Fizz 4 Buzz Fizz 7 8 Fizz Buzz 11 Fizz 13 14 FizzBuzz 16 17 Fizz 19 Buzz Fizz 22 23 Fizz Buzz 26 Fizz 28 29 FizzBuzz"
      }
    ]
  },
  {
    "title": "Product of Array Except Self",
    "difficulty": "Medium",
    "tags": [
      "Arrays",
      "Prefix Sum"
    ],
    "statement": "Given an integer array `nums`, return an array `answer` such that `answer[i]` is equal to the product of all the elements of `nums` except `nums[i]`. You must write an algorithm that runs in O(n) time and does not use the division operation.",
    "inputFormat": "- A single line of space-separated integers `nums`.",
    "outputFormat": "- A single line of the resulting space-separated integers.",
    "constraints": "- 2 <= nums.length <= 10^5\r\n- -30 <= nums[i] <= 30",
    "samples": [
      {
        "input": "1 2 3 4",
        "output": "24 12 8 6"
      },
      {
        "input": "-1 1 0 -3 3",
        "output": "0 0 9 0 0"
      }
    ],
    "hiddenTestCases": [
      {
        "input": "1 0",
        "output": "0 1"
      },
      {
        "input": "-1 -1",
        "output": "-1 -1"
      },
      {
        "input": "2 3 0 0",
        "output": "0 0 0 0"
      },
      {
        "input": "1 2 3 4 5",
        "output": "120 60 40 30 24"
      }
    ]
  },
  {
    "title": "Group Anagrams",
    "difficulty": "Medium",
    "tags": [
      "Hash Table",
      "Strings"
    ],
    "statement": "Given a list of strings, group the anagrams together. You can return the answer in any order. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
    "inputFormat": "- A single line of space-separated strings.",
    "outputFormat": "- Each line of the output should contain a group of anagrams, space-separated. The groups themselves can be in any order, and strings within a group can be in any order.",
    "constraints": "- 1 <= strs.length <= 10^4\r\n- 0 <= strs[i].length <= 100\r\n- strs[i] consists of lowercase English letters.",
    "samples": [
      {
        "input": "eat tea tan ate nat bat",
        "output": "(Order of lines and words within lines may vary)\r\nbat\r\ntan nat\r\neat tea ate"
      },
      {
        "input": "a",
        "output": "a"
      }
    ],
    "hiddenTestCases": [
      {
        "input": "\"\"",
        "output": "\"\""
      },
      {
        "input": "cab car",
        "output": "cab\r\ncar"
      },
      {
        "input": "listen silent elbow below",
        "output": "listen silent\r\nelbow below"
      },
      {
        "input": "abc bca cba def fed efd",
        "output": "abc bca cba\r\ndef fed efd"
      }
    ]
  },
  {
    "title": "3Sum",
    "difficulty": "Medium",
    "tags": [
      "Arrays",
      "Two Pointers"
    ],
    "statement": "Given an integer array `nums`, find all unique triplets `[nums[i], nums[j], nums[k]]` such that `i != j`, `i != k`, and `j != k`, and `nums[i] + nums[j] + nums[k] == 0`. Notice that the solution set must not contain duplicate triplets.",
    "inputFormat": "- A single line of space-separated integers `nums`.",
    "outputFormat": "- Each line of output should contain a unique triplet, with numbers space-separated and sorted. The triplets themselves should be printed in lexicographical order. If no such triplets exist, print \"None\".",
    "constraints": "- 3 <= nums.length <= 3000\r\n- -10^5 <= nums[i] <= 10^5",
    "samples": [
      {
        "input": "-1 0 1 2 -1 -4",
        "output": "-1 -1 2\r\n-1 0 1"
      },
      {
        "input": "0 1 1",
        "output": "None"
      }
    ],
    "hiddenTestCases": [
      {
        "input": "0 0 0",
        "output": "0 0 0"
      },
      {
        "input": "0 0 0 0",
        "output": "0 0 0"
      },
      {
        "input": "-2 0 1 1 2",
        "output": "-2 0 2\r\n-2 1 1"
      },
      {
        "input": "-1 0 1 0",
        "output": "-1 0 1"
      }
    ]
  },
  {
    "title": "Rotate Image",
    "difficulty": "Medium",
    "tags": [
      "Arrays",
      "Matrix"
    ],
    "statement": "You are given an n x n 2D matrix representing an image. Rotate the image by 90 degrees (clockwise). You have to rotate the image in-place, which means you have to modify the input 2D matrix directly.",
    "inputFormat": "- The first line contains an integer `n`.\r\n- The next `n` lines each contain `n` space-separated integers, representing the matrix.",
    "outputFormat": "- Print the `n x n` matrix after rotation, with each row on a new line and elements space-separated.",
    "constraints": "- 1 <= n <= 20\r\n- -1000 <= matrix[i][j] <= 1000",
    "samples": [
      {
        "input": "3\r\n1 2 3\r\n4 5 6\r\n7 8 9",
        "output": "7 4 1\r\n8 5 2\r\n9 6 3"
      },
      {
        "input": "4\r\n5 1 9 11\r\n2 4 8 10\r\n13 3 6 7\r\n15 14 12 16",
        "output": "15 13 2 5\r\n14 3 4 1\r\n12 6 8 9\r\n16 7 10 11"
      }
    ],
    "hiddenTestCases": [
      {
        "input": "1\r\n10",
        "output": "10"
      },
      {
        "input": "2\r\n1 2\r\n3 4",
        "output": "3 1\r\n4 2"
      },
      {
        "input": "2\r\n-1 -2\r\n-3 -4",
        "output": "-3 -1\r\n-4 -2"
      }
    ]
  },
  {
    "title": "Longest Substring Without Repeating Characters",
    "difficulty": "Medium",
    "tags": [
      "Hash Table",
      "String",
      "Sliding Window"
    ],
    "statement": "Given a string `s`, find the length of the longest substring without repeating characters.",
    "inputFormat": "- A single line containing the string `s`.",
    "outputFormat": "- A single integer representing the length.",
    "constraints": "- 0 <= s.length <= 5 * 10^4\r\n- `s` consists of English letters, digits, symbols and spaces.",
    "samples": [
      {
        "input": "abcabcbb",
        "output": "3"
      },
      {
        "input": "bbbbb",
        "output": "1"
      }
    ],
    "hiddenTestCases": [
      {
        "input": "pwwkew",
        "output": "3"
      },
      {
        "input": "\"\"",
        "output": "0"
      },
      {
        "input": "a",
        "output": "1"
      },
      {
        "input": "dvdf",
        "output": "3"
      }
    ]
  },
  {
    "title": "Coin Change",
    "difficulty": "Medium",
    "tags": [
      "Dynamic Programming"
    ],
    "statement": "You are given an array of integer `coins` representing coins of different denominations and an integer `amount` representing a total amount of money. Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1. You may assume that you have an infinite number of each kind of coin.",
    "inputFormat": "- The first line contains the target `amount`.\r\n- The second line contains a space-separated list of coin denominations.",
    "outputFormat": "- A single integer.",
    "constraints": "- 1 <= coins.length <= 12\r\n- 1 <= coins[i] <= 2^31 - 1\r\n- 0 <= amount <= 10^4",
    "samples": [
      {
        "input": "11\r\n1 2 5",
        "output": "3"
      },
      {
        "input": "3\r\n2",
        "output": "-1"
      }
    ],
    "hiddenTestCases": [
      {
        "input": "0\r\n1 2 3",
        "output": "0"
      },
      {
        "input": "1\r\n2",
        "output": "-1"
      },
      {
        "input": "7\r\n1 3 4 5",
        "output": "2"
      },
      {
        "input": "6249\r\n186 419 83 408",
        "output": "20"
      }
    ]
  },
  {
    "title": "Spiral Matrix",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Matrix"
    ],
    "statement": "Given an `m x n` matrix, return all elements of the matrix in spiral order.",
    "inputFormat": "- The first line contains two integers `m` and `n`.\r\n- The next `m` lines each contain `n` space-separated integers.",
    "outputFormat": "- A single line of space-separated integers in spiral order.",
    "constraints": "- 1 <= m, n <= 10\r\n- -100 <= matrix[i][j] <= 100",
    "samples": [
      {
        "input": "3 3\r\n1 2 3\r\n4 5 6\r\n7 8 9",
        "output": "1 2 3 6 9 8 7 4 5"
      },
      {
        "input": "3 4\r\n1 2 3 4\r\n5 6 7 8\r\n9 10 11 12",
        "output": "1 2 3 4 8 12 11 10 9 5 6 7"
      }
    ],
    "hiddenTestCases": [
      {
        "input": "1 1\r\n5",
        "output": "5"
      },
      {
        "input": "1 5\r\n1 2 3 4 5",
        "output": "1 2 3 4 5"
      },
      {
        "input": "5 1\r\n1\r\n2\r\n3\r\n4\r\n5",
        "output": "1 2 3 4 5"
      },
      {
        "input": "2 2\r\n1 2\r\n3 4",
        "output": "1 2 4 3"
      }
    ]
  },
  {
    "title": "Kth Largest Element in an Array",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Sorting",
      "Heap"
    ],
    "statement": "Given an integer array `nums` and an integer `k`, return the `k`-th largest element in the array. Note that it is the k-th largest element in the sorted order, not the k-th distinct element.",
    "inputFormat": "- The first line contains the integer `k`.\r\n- The second line contains the space-separated integers of array `nums`.",
    "outputFormat": "- A single integer.",
    "constraints": "- 1 <= k <= nums.length <= 10^5\r\n- -10^4 <= nums[i] <= 10^4",
    "samples": [
      {
        "input": "2\r\n3 2 1 5 6 4",
        "output": "5"
      },
      {
        "input": "4\r\n3 2 3 1 2 4 5 5 6",
        "output": "4"
      }
    ],
    "hiddenTestCases": [
      {
        "input": "1\r\n1",
        "output": "1"
      },
      {
        "input": "3\r\n-1 -1 2",
        "output": "-1"
      },
      {
        "input": "2\r\n1 1 1 1 1",
        "output": "1"
      },
      {
        "input": "5\r\n7 6 5 4 3 2 1",
        "output": "3"
      }
    ]
  },
  {
    "title": "Word Break",
    "difficulty": "Medium",
    "tags": [
      "Hash Table",
      "String",
      "Dynamic Programming"
    ],
    "statement": "Given a string `s` and a dictionary of strings `wordDict`, return \"true\" if `s` can be segmented into a space-separated sequence of one or more dictionary words. Note that the same word in the dictionary may be reused multiple times in the segmentation.",
    "inputFormat": "- The first line is the string `s`.\r\n- The second line is a space-separated list of words in `wordDict`.",
    "outputFormat": "- \"true\" or \"false\".",
    "constraints": "- 1 <= s.length <= 300\r\n- 1 <= wordDict.length <= 1000\r\n- 1 <= wordDict[i].length <= 20\r\n- `s` and `wordDict[i]` consist of lowercase English letters.",
    "samples": [
      {
        "input": "leetcode\r\nleet code",
        "output": "true"
      },
      {
        "input": "catsandog\r\ncats cat sand and dog",
        "output": "false"
      }
    ],
    "hiddenTestCases": [
      {
        "input": "applepenapple\r\napple pen",
        "output": "true"
      },
      {
        "input": "a\r\nb",
        "output": "false"
      },
      {
        "input": "aaaaaaa\r\naaa aaaa",
        "output": "true"
      },
      {
        "input": "bb\r\na b c",
        "output": "true"
      }
    ]
  },
  {
    "title": "Binary Tree Level Order Traversal",
    "difficulty": "Medium",
    "tags": [
      "Tree",
      "Breadth-First Search"
    ],
    "statement": "Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level). The tree is represented by an array where `null` signifies a missing node in a level-complete tree structure.",
    "inputFormat": "- A single line containing the space-separated values of the tree in level order, with \"null\" for empty nodes.",
    "outputFormat": "- Each line of the output represents a level, with node values space-separated.",
    "constraints": "- The number of nodes in the tree is in the range [0, 2000].\r\n- -1000 <= Node.val <= 1000",
    "samples": [
      {
        "input": "3 9 20 null null 15 7",
        "output": "3\r\n9 20\r\n15 7"
      },
      {
        "input": "1",
        "output": "1"
      }
    ],
    "hiddenTestCases": [
      {
        "input": "(empty line)",
        "output": "(empty output)"
      },
      {
        "input": "1 null 2 null 3",
        "output": "1\r\n2\r\n3"
      },
      {
        "input": "10 5 15 2 7 12 20",
        "output": "10\r\n5 15\r\n2 7 12 20"
      },
      {
        "input": "1 2 3 4 5 6 7",
        "output": "1\r\n2 3\r\n4 5 6 7"
      }
    ]
  }
]